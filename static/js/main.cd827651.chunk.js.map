{"version":3,"sources":["request.js","axios.js","Row.tsx","Banner.tsx","Nav.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["API_KEY","requests","feachTrending","feachNetflixOriginals","feactTopRated","feactActionMovies","feactComedyMovies","feactHorrorMovies","feactRomanceMovies","feactDocumentMovies","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","handleClick","movie","id","trailerurl","key","className","map","i","src","poster_path","backdrop_path","alt","name","onClick","videoId","opts","height","width","playerVars","autoplay","Banner","setMovie","console","log","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","orignal_name","str","n","undefined","substr","truncate","overview","Nav","props","show","setShow","handleShow","window","scrollY","addEventListener","removeEventListener","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd827651.chunk.js","sourcesContent":["const API_KEY = \"9fc4016c3b03ce364928ddcb80a9e452\"\n\nexport const requests ={\n  feachTrending:`/trending/all/week?api_key=${API_KEY}&language=en-us`,\n  feachNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  feactTopRated:`/discover/tv?api_key=${API_KEY}&languager=en-us`,\n  feactActionMovies:`/discover/tv?api_key=${API_KEY}&with_genres=28`,\n  feactComedyMovies:`/discover/tv?api_key=${API_KEY}&with_genres=35`,\n  feactHorrorMovies:`/discover/tv?api_key=${API_KEY}&with_genres=27`,\n  feactRomanceMovies:`/discover/tv?api_key=${API_KEY}&with_genres=10749`,\n  feactDocumentMovies:`/discover/tv?api_key=${API_KEY}&with_genres=99`,\n}\n","import axios from 'axios'\n\n//TMDBからのbaseURLリクエストを作成\nconst instance = axios.create({\n    baseURL:\"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","\nimport axios from \"./axios\";\nimport { useEffect, useState } from \"react\"\nimport YouTube from \"react-youtube\";\n\ntype Props ={\n  title:string;\n  fetchUrl:string;\n  isLargeRow:boolean;\n}\ntype Movie={\n  id:string;\n  name:string;\n  title:string;\n  original_name:string;\n  poster_path:string;\n  backdrop_path:string;\n}\n\ntype Options ={\n  height:string;\n  width:string;\n  playerVars:{\n    autoplay:0|1|undefined;\n  }\n}\n\nexport const Row =({title,fetchUrl,isLargeRow}:Props)=>{\n  const [movies,setMovies]=useState<Movie[]>([]);\n  const [trailerUrl,setTrailerUrl] = useState<string | null>(\"\")\n  useEffect(()=>{\n    const fetchData = async ()=>{\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request\n    }\n    fetchData()\n  },[fetchUrl])\n  const opts:Options={\n    height:\"390\",\n    width:\"640\",\n    playerVars:{\n      autoplay:1,\n    }\n  }\n  const handleClick = async (movie:Movie)=>{\n    if (trailerUrl) {\n      setTrailerUrl(\"\")\n    } else {\n      let trailerurl = await axios.get(\n        `/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`\n      )\n      setTrailerUrl(trailerurl.data.results[0]?.key);\n    }\n  }\n\n  return(\n    <div className=\"Row\">\n      <h2>{title}</h2>\n      <div className=\"Row-posters\">\n        {\n          movies.map((movie,i)=>(\n            <img key={movie.id}\n                 className={`Row-poster ${isLargeRow && \"Row-poster-large\"}`}\n                 src={`https://image.tmdb.org/t/p/w500${\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\n                }`}\n                 alt={movie.name}\n                onClick={()=>handleClick(movie)}\n            />\n          ))\n        }\n      </div>\n       {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\n    </div>\n  )\n}\n","import axios from \"./axios\";\nimport { useEffect, useState } from \"react\";\nimport { requests } from \"./request\";\n\ntype movieProps={\n  title?:string;\n  name?:string;\n  orignal_name?:string;\n  backdrop_path?:string;\n  overview?:string;\n}\n\nexport const Banner = ()=>{\n  const [movie,setMovie]=useState<movieProps>({});\n  useEffect(()=>{\n    async function fetchData(){\n      const request = await axios.get(requests.feachNetflixOriginals)\n      console.log(request.data.results);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return requests\n    }\n    fetchData();\n  },[])\n  console.log(movie);\n  function truncate(str:any,n:number){\n    if(str !== undefined){\n      return str.length > n ? str?.substr(0,n-1)+\"...\":str;\n    }\n  }\n  return(\n    <header className=\"Banner\" style={{\n      backgroundSize:\"cover\",\n      backgroundImage:`url(\"https://image.tmdb.org/t/p/original${movie?.backdrop_path}\")`,\n      backgroundPosition:\"center center\",\n    }}>\n    <div className=\"Banner-contents\">\n      <h1 className=\"banner-title\">\n        {movie?.title||movie?.name||movie?.orignal_name}\n      </h1>\n      <div className=\"Banner-buttons\">\n        <button className=\"Banner-button\">Play</button>\n        <button className=\"Banner-button\">My List</button>\n      </div>\n      <h1 className=\"Banner-description\">{truncate(movie?.overview,150)}</h1>\n    </div>\n    <div className=\"Banner-fadeBottom\"/>\n    </header>\n  )\n}\n","import { useEffect, useState } from \"react\"\n\ntype Props={\n  className?:string;\n}\nexport const Nav=(props:Props)=>{\n  const [show,setShow]=useState(false)\n  useEffect(()=>{\n    const handleShow=()=>{\n      if (window.scrollY>100) {\n        setShow(true)\n      } else {\n        setShow(false)\n      }\n    }\n    window.addEventListener(\"scroll\",handleShow)\n    return()=>{\n      window.removeEventListener(\"scroll\",handleShow);\n    }\n  },[])\n\n\n  return (\n      <div className={`Nav ${show && \"Nav-black\"}`}>\n         <script src=\"https://www.youtube.com/iframe_api\"></script>\n      <img\n        className=\"Nav-logo\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\n        alt=\"Netflix Logo\"\n      />\n\n      <img\n        className=\"Nav-avater\"\n        src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\n        alt=\"Avatar\"\n      />\n    </div>\n\n    )\n}\n","import './App.css';\nimport { requests } from './request';\nimport \"./Row.scss\"\nimport \"./Banner.scss\"\nimport \"./Nav.scss\"\nimport { Row } from './Row'\nimport { Banner } from './Banner';\nimport { Nav } from './Nav';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav/>\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGUINALS\"\n        fetchUrl={requests.feachNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Top Rated\" fetchUrl={requests.feactTopRated} isLargeRow/>\n      <Row title=\"Action Movies\" fetchUrl={requests.feactActionMovies} isLargeRow/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.feactComedyMovies} isLargeRow/>\n      <Row title=\"Horror Movies\" fetchUrl={requests.feactHorrorMovies} isLargeRow/>\n      <Row title=\"Romance Movies\" fetchUrl={requests.feactRomanceMovies} isLargeRow/>\n      <Row title=\"DOcumentaries\" fetchUrl={requests.feactDocumentMovies} isLargeRow/>\n   </div>\n  );\n}\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}